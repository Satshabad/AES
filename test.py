__author__ = 'satshabad'

import unittest
import AES

class GeneticTest(unittest.TestCase):
    def setUp(self):
        self.aes = AES.AES(
            [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f])

    def test__encrypt(self):
        given = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
        expected = [0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x4, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a]

        self.assertEqual(self.aes.encrypt(given), expected)


    def test__decrypt(self):
        expected = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
        given = [0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x4, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a]

        self.assertEqual(self.aes.decrypt(given), expected)


    def test__subBytes(self):
        given = [[0x00, 0x10, 0x20, 0x30],
            [0x40, 0x50, 0x60, 0x70],
            [0x80, 0x90, 0xa0, 0xb0],
            [0xc0, 0xd0, 0xe0, 0xf0]]

        expected = [[0x63, 0xca, 0xb7, 0x04],
            [0x09, 0x53, 0xd0, 0x51],
            [0xcd, 0x60, 0xe0, 0xe7],
            [0xba, 0x70, 0xe1, 0x8c]]

        self.assertEqual(self.aes._subBytes(given), expected)
        self.assertEqual(self.aes._subBytes(self.aes._invSubBytes(given)), given)

    def test__invSubBytes(self):
        expected = [[0x00, 0x10, 0x20, 0x30],
            [0x40, 0x50, 0x60, 0x70],
            [0x80, 0x90, 0xa0, 0xb0],
            [0xc0, 0xd0, 0xe0, 0xf0]]

        given = [[0x63, 0xca, 0xb7, 0x04],
            [0x09, 0x53, 0xd0, 0x51],
            [0xcd, 0x60, 0xe0, 0xe7],
            [0xba, 0x70, 0xe1, 0x8c]]

        self.assertEqual(self.aes._invSubBytes(given), expected)
        self.assertEqual(self.aes._invSubBytes(self.aes._subBytes(given)), given)


    def test__shiftRows(self):
        expected = [[0x63, 0x9, 0xcd, 0xba],
            [0x53, 0x60, 0x70, 0xca],
            [0xe0, 0xe1, 0xb7, 0xd0],
            [0x8c, 0x4, 0x51, 0xe7]]

        given = [[0x63, 0x09, 0xcd, 0xba],
            [0xca, 0x53, 0x60, 0x70],
            [0xb7, 0xd0, 0xe0, 0xe1],
            [0x04, 0x51, 0xe7, 0x8c]]

        self.assertEqual(self.aes._shiftRows(given), expected)
        self.assertEqual(self.aes._shiftRows(self.aes._invShiftRows(given)), given)


    def test__invShiftRows(self):
        given = [[0x63, 0x9, 0xcd, 0xba],
            [0x53, 0x60, 0x70, 0xca],
            [0xe0, 0xe1, 0xb7, 0xd0],
            [0x8c, 0x4, 0x51, 0xe7]]

        expected = [[0x63, 0x09, 0xcd, 0xba],
            [0xca, 0x53, 0x60, 0x70],
            [0xb7, 0xd0, 0xe0, 0xe1],
            [0x04, 0x51, 0xe7, 0x8c]]

        self.assertEqual(self.aes._invShiftRows(given), expected)
        self.assertEqual(self.aes._invShiftRows(self.aes._shiftRows(given)), given)


    def test__mult(self):
        self.assertEqual(self.aes._mult(0x0e, 0x5f), 0x17)

    def test__invMixColumns(self):
        #6353e08c 0960e104 cd70b751 bacad0e7
        expected = [[0x63, 0x9, 0xcd, 0xba],
            [0x53, 0x60, 0x70, 0xca],
            [0xe0, 0xe1, 0xb7, 0xd0],
            [0x8c, 0x4, 0x51, 0xe7]]


        #5f726415 57f5bc92 f7be3b29 1db9f91a
        given = [[0x5f, 0x57, 0xf7, 0x1d],
            [0x72, 0xf5, 0xbe, 0xb9],
            [0x64, 0xbc, 0x3b, 0xf9],
            [0x15, 0x92, 0x29, 0x1a]]
        self.assertEqual(self.aes._invMixColumns(given), expected)
        self.assertEqual(self.aes._invMixColumns(self.aes._mixColumns(given)), given)


    def test__mixColumns(self):
        #6353e08c 0960e104 cd70b751 bacad0e7
        given = [[0x63, 0x9, 0xcd, 0xba],
            [0x53, 0x60, 0x70, 0xca],
            [0xe0, 0xe1, 0xb7, 0xd0],
            [0x8c, 0x4, 0x51, 0xe7]]



        # 5f726415 57f5bc92 f7be3b29 1db9f91a
        expected = [[0x5f, 0x57, 0xf7, 0x1d],
            [0x72, 0xf5, 0xbe, 0xb9],
            [0x64, 0xbc, 0x3b, 0xf9],
            [0x15, 0x92, 0x29, 0x1a]]

        self.assertEqual(self.aes._mixColumns(given), expected)
        self.assertEqual(self.aes._mixColumns(self.aes._invMixColumns(given)), given)


    def test__expandKey(self):
        Nk = 4
        self.aes.Nr = Nk + 4 + 2
        self.assertEqual(self.flattenKey(self.aes._expandKey(
            [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f], Nk)),
            [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0xd6, 0xaa,
             0x74, 0xfd, 0xd2, 0xaf, 0x72, 0xfa, 0xda, 0xa6, 0x78, 0xf1, 0xd6, 0xab, 0x76, 0xfe, 0xb6, 0x92, 0xcf, 0x0b,
             0x64, 0x3d, 0xbd, 0xf1, 0xbe, 0x9b, 0xc5, 0x00, 0x68, 0x30, 0xb3, 0xfe, 0xb6, 0xff, 0x74, 0x4e, 0xd2, 0xc2,
             0xc9, 0xbf, 0x6c, 0x59, 0x0c, 0xbf, 0x04, 0x69, 0xbf, 0x41, 0x47, 0xf7, 0xf7, 0xbc, 0x95, 0x35, 0x3e, 0x03,
             0xf9, 0x6c, 0x32, 0xbc, 0xfd, 0x05, 0x8d, 0xfd, 0x3c, 0xaa, 0xa3, 0xe8, 0xa9, 0x9f, 0x9d, 0xeb, 0x50, 0xf3,
             0xaf, 0x57, 0xad, 0xf6, 0x22, 0xaa, 0x5e, 0x39, 0x0f, 0x7d, 0xf7, 0xa6, 0x92, 0x96, 0xa7, 0x55, 0x3d, 0xc1,
             0x0a, 0xa3, 0x1f, 0x6b, 0x14, 0xf9, 0x70, 0x1a, 0xe3, 0x5f, 0xe2, 0x8c, 0x44, 0x0a, 0xdf, 0x4d, 0x4e, 0xa9,
             0xc0, 0x26, 0x47, 0x43, 0x87, 0x35, 0xa4, 0x1c, 0x65, 0xb9, 0xe0, 0x16, 0xba, 0xf4, 0xae, 0xbf, 0x7a, 0xd2,
             0x54, 0x99, 0x32, 0xd1, 0xf0, 0x85, 0x57, 0x68, 0x10, 0x93, 0xed, 0x9c, 0xbe, 0x2c, 0x97, 0x4e, 0x13, 0x11,
             0x1d, 0x7f, 0xe3, 0x94, 0x4a, 0x17, 0xf3, 0x07, 0xa7, 0x8b, 0x4d, 0x2b, 0x30, 0xc5])

        Nk = 6
        self.aes.Nr = Nk + 4 + 2
        self.assertEqual(self.flattenKey(self.aes._expandKey(
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ], Nk)),
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63,
             0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb,
             0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa,
             0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99, 0x90, 0x97,
             0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xc8, 0x1d, 0x19, 0xa9, 0xa1, 0x71, 0xd6, 0x53, 0x53, 0x85, 0x81, 0x60,
             0x58, 0x8a, 0x2d, 0xf9, 0xc8, 0x1d, 0x19, 0xa9, 0xa1, 0x71, 0xd6, 0x53, 0x7b, 0xeb, 0xf4, 0x9b, 0xda, 0x9a,
             0x22, 0xc8, 0x89, 0x1f, 0xa3, 0xa8, 0xd1, 0x95, 0x8e, 0x51, 0x19, 0x88, 0x97, 0xf8, 0xb8, 0xf9, 0x41, 0xab,
             0xc2, 0x68, 0x96, 0xf7, 0x18, 0xf2, 0xb4, 0x3f, 0x91, 0xed, 0x17, 0x97, 0x40, 0x78, 0x99, 0xc6, 0x59, 0xf0,
             0x0e, 0x3e, 0xe1, 0x09, 0x4f, 0x95, 0x83, 0xec, 0xbc, 0x0f, 0x9b, 0x1e, 0x08, 0x30, 0x0a, 0xf3, 0x1f, 0xa7,
             0x4a, 0x8b, 0x86, 0x61, 0x13, 0x7b, 0x88, 0x5f, 0xf2, 0x72, 0xc7, 0xca, 0x43, 0x2a, 0xc8, 0x86, 0xd8, 0x34,
             0xc0, 0xb6, 0xd2, 0xc7, 0xdf, 0x11, 0x98, 0x4c, 0x59, 0x70])

        Nk = 8
        self.aes.Nr = Nk + 4 + 2
        self.assertEqual(self.flattenKey(self.aes._expandKey(
            [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], Nk)),
            [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xe9, 0xe9, 0xe9,
             0x17, 0x16, 0x16, 0x16, 0xe8, 0xe9, 0xe9, 0xe9, 0x17, 0x16, 0x16, 0x16, 0x0f, 0xb8, 0xb8, 0xb8, 0xf0, 0x47,
             0x47, 0x47, 0x0f, 0xb8, 0xb8, 0xb8, 0xf0, 0x47, 0x47, 0x47, 0x4a, 0x49, 0x49, 0x65, 0x5d, 0x5f, 0x5f, 0x73,
             0xb5, 0xb6, 0xb6, 0x9a, 0xa2, 0xa0, 0xa0, 0x8c, 0x35, 0x58, 0x58, 0xdc, 0xc5, 0x1f, 0x1f, 0x9b, 0xca, 0xa7,
             0xa7, 0x23, 0x3a, 0xe0, 0xe0, 0x64, 0xaf, 0xa8, 0x0a, 0xe5, 0xf2, 0xf7, 0x55, 0x96, 0x47, 0x41, 0xe3, 0x0c,
             0xe5, 0xe1, 0x43, 0x80, 0xec, 0xa0, 0x42, 0x11, 0x29, 0xbf, 0x5d, 0x8a, 0xe3, 0x18, 0xfa, 0xa9, 0xd9, 0xf8,
             0x1a, 0xcd, 0xe6, 0x0a, 0xb7, 0xd0, 0x14, 0xfd, 0xe2, 0x46, 0x53, 0xbc, 0x01, 0x4a, 0xb6, 0x5d, 0x42, 0xca,
             0xa2, 0xec, 0x6e, 0x65, 0x8b, 0x53, 0x33, 0xef, 0x68, 0x4b, 0xc9, 0x46, 0xb1, 0xb3, 0xd3, 0x8b, 0x9b, 0x6c,
             0x8a, 0x18, 0x8f, 0x91, 0x68, 0x5e, 0xdc, 0x2d, 0x69, 0x14, 0x6a, 0x70, 0x2b, 0xde, 0xa0, 0xbd, 0x9f, 0x78,
             0x2b, 0xee, 0xac, 0x97, 0x43, 0xa5, 0x65, 0xd1, 0xf2, 0x16, 0xb6, 0x5a, 0xfc, 0x22, 0x34, 0x91, 0x73, 0xb3,
             0x5c, 0xcf, 0xaf, 0x9e, 0x35, 0xdb, 0xc5, 0xee, 0x1e, 0x05, 0x06, 0x95, 0xed, 0x13, 0x2d, 0x7b, 0x41, 0x84,
             0x6e, 0xde, 0x24, 0x55, 0x9c, 0xc8, 0x92, 0x0f, 0x54, 0x6d, 0x42, 0x4f, 0x27, 0xde, 0x1e, 0x80, 0x88, 0x40,
             0x2b, 0x5b, 0x4d, 0xae, 0x35, 0x5e])


    def test__addRoundKey(self):
        # 00112233445566778899aabbccddeeff
        given = [[0x00, 0x44, 0x88, 0xcc],
            [0x11, 0x55, 0x99, 0xdd],
            [0x22, 0x66, 0xaa, 0xee],
            [0x33, 0x77, 0xbb, 0xff]]

        # 00102030405060708090a0b0c0d0e0f0
        expected = [[0, 64, 128, 192],
            [16, 80, 144, 208],
            [32, 96, 160, 224],
            [48, 112, 176, 240]]

        self.assertEqual(self.aes._addRoundKey(given,
            [[0x00, 0x01, 0x02, 0x03], [0x04, 0x05, 0x06, 0x07], [0x08, 0x09, 0x0a, 0x0b], [0x0c, 0x0d, 0x0e, 0x0f]]),
            expected)


    def test__rot(self):
        self.assertEqual(self.aes._rot([0x63, 0x9, 0xcd, 0xba]), [0x9, 0xcd, 0xba, 0x63])

    def text__subWord(self):
        self.assertEqual(self.aes._rot([0x63, 0x9, 0xcd, 0xba]), [0x05, 0x60, 0x86, 0x62])

    def test__xtime(self):
        self.assertEqual(self.aes._xtime(0b01010110), 0b10101100)
        self.assertEqual(self.aes._xtime(0b10101100), 0b001000011)


    def print_in_col_order(self, s):
        for colNum in range(len(s[0])):
            for row in s:
                print hex(row[colNum]),
            print

    def hex_to_matrix(self, string):
        s = [[0 for val in range(4)] for row in range(4)]
        dexOfString = 0
        for i, row in enumerate(s):
            for j, val in enumerate(row):
                s[j][i] = hex(int(string[dexOfString: dexOfString + 2], 16))
        return s

    def state_to_hex_string(self, state):
        st = ""
        for i in range(len(state)):
            for j in range(len(state[0])):
                st += str(hex(state[j][i])) + " "
        return st

    def key_to_hex_string(self, state):
        st = ""
        print state
        for i in range(len(state)):
            for j in range(len(state[1])):
                st += str(hex(state[i][j])) + " "
            st += '\n'
        return st

    def flattenKey(self, key):
        newKey = []
        [newKey.extend(keypart) for keypart in key]
        return newKey


if __name__ == '__main__':
    unittest.main()



